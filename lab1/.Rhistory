demo()
install.packages("http://www.bnlearn.com/releases/bnlearn_latest.tar.gz")
install.packages("http://www.bnlearn.com/releases/bnlearn_latest.tar.gz")
install.packages("bnlearn")
x <- (1, 2, 3)
x <- c(1, 2, 3)
x*2
setwd("~/Projects/AML/lab1")
e = empty.graph
library(bnlearn)
e = empty.graph
class(e)
class(e)
e
e = empty.graph(LETTERS[1:6])
class(e)
e
class (arc)
arc.set = matrix(c("A", "C", "B", "F", "C", "F"),
ncol = 2, byrow = TRUE,
dimnames = list(NULL, c("from", "to")))
arc.set
class (arc)
class (arc.set)
arcs(e) = arc.set
e
acyclic(e)
edges = matrix(c("A", "B", "B", "A", "C", "D"),
ncol = 2, byrow = TRUE,
dimnames = list(NULL, c("from", "to")))
edges = matrix(c("A", "B", "B", "A", "C", "D"),
ncol = 2, byrow = TRUE,
dimnames = list(NULL, c("from", "to")))
edges = matrix(c("A", "B", "B", "A", "C", "D"),
ncol = 2, byrow = TRUE,
dimnames = list(NULL, c("from", "to")))
edges
library(bnlearn)
e <- empty.graph(LETTERS[1:6], num = 1) # num specifies number of objects
class(e)
e
arc.set <- matrix(c("A", "C", "B", "F", "C", "F"),
ncol = 2, byrow = TRUE,
dimnames = list(NULL, c("from", "to")))
arc.set
arcs(e) <- arc.set # Node labels must be present in graph and loops A -> A are illegal
e
#arcs(e, ignore.cycles = TRUE) # cycles cannot be introduced to the network unless this set to true
acyclic(e) #Checks whether graph has any cycles
# Undirected arcs (edges) can be introduced by including both directions (A -> B & B <- A)
edges = matrix(c("A", "B", "B", "A", "C", "D"),
ncol = 2, byrow = TRUE,
dimnames = list(NULL, c("from", "to")))
edges
arcs(e) = edges
# Arcs kan också skapas med en binär matris där
adj = matrix(0L, ncol = 6, nrow = 6,
dimnames = list(LETTERS[1:6], LETTERS[1:6]))
adj["A", "C"] = 1L
adj["B", "F"] = 1L
adj["C", "F"] = 1L
adj["D", "E"] = 1L
adj["A", "E"] = 1L
adj
amat(e) = adj
e
library(bnlearn)
e <- empty.graph(LETTERS[1:6], num = 1) # num specifies number of objects
class(e)
e
arc.set <- matrix(c("A", "C", "B", "F", "C", "F"),
ncol = 2, byrow = TRUE,
dimnames = list(NULL, c("from", "to")))
arc.set
arcs(e) <- arc.set # Node labels must be present in graph and loops A -> A are illegal
e
#arcs(e, ignore.cycles = TRUE) # cycles cannot be introduced to the network unless this set to true
acyclic(e) #Checks whether graph has any cycles
# Undirected arcs (edges) can be introduced by including both directions (A -> B & B <- A)
edges = matrix(c("A", "B", "B", "A", "C", "D"),
ncol = 2, byrow = TRUE,
dimnames = list(NULL, c("from", "to")))
edges
arcs(e) = edges
# Arcs kan också skapas med en binär matris där
adj = matrix(0L, ncol = 6, nrow = 6,
dimnames = list(LETTERS[1:6], LETTERS[1:6]))
adj["A", "C"] = 1L
adj["B", "F"] = 1L
adj["C", "F"] = 1L
adj["D", "E"] = 1L
adj["A", "E"] = 1L
adj
amat(e) = adj
e
?print
print("Hej")
print("----------------- START ------------------")
library(bnlearn)
e <- empty.graph(LETTERS[1:6], num = 1) # num specifies number of objects
class(e)
e
arc.set <- matrix(c("A", "C", "B", "F", "C", "F"),
ncol = 2, byrow = TRUE,
dimnames = list(NULL, c("from", "to")))
arc.set
arcs(e) <- arc.set # Node labels must be present in graph and loops A -> A are illegal
e
#arcs(e, ignore.cycles = TRUE) # cycles cannot be introduced to the network unless this set to true
acyclic(e) #Checks whether graph has any cycles
# Undirected arcs (edges) can be introduced by including both directions (A -> B & B <- A)
edges = matrix(c("A", "B", "B", "A", "C", "D"),
ncol = 2, byrow = TRUE,
dimnames = list(NULL, c("from", "to")))
edges
arcs(e) = edges
# Arcs kan också skapas med en binär matris där
adj = matrix(0L, ncol = 6, nrow = 6,
dimnames = list(LETTERS[1:6], LETTERS[1:6]))
adj["A", "C"] = 1L
adj["B", "F"] = 1L
adj["C", "F"] = 1L
adj["D", "E"] = 1L
adj["A", "E"] = 1L
adj
amat(e) = adj
e
print("----------------- START ------------------")
library(bnlearn)
e <- empty.graph(LETTERS[1:6], num = 1) # num specifies number of objects
class(e)
e
arc.set <- matrix(c("A", "C", "B", "F", "C", "F"),
ncol = 2, byrow = TRUE,
dimnames = list(NULL, c("from", "to")))
arc.set
arcs(e) <- arc.set # Node labels must be present in graph and loops A -> A are illegal
e
#arcs(e, ignore.cycles = TRUE) # cycles cannot be introduced to the network unless this set to true
acyclic(e) #Checks whether graph has any cycles
# Undirected arcs (edges) can be introduced by including both directions (A -> B & B <- A)
edges = matrix(c("A", "B", "B", "A", "C", "D"),
ncol = 2, byrow = TRUE,
dimnames = list(NULL, c("from", "to")))
arcs(e) = edges
# Arcs kan också skapas med en binär matris där
adj = matrix(0L, ncol = 6, nrow = 6,
dimnames = list(LETTERS[1:6], LETTERS[1:6]))
adj["A", "C"] = 1L
adj["B", "F"] = 1L
adj["C", "F"] = 1L
adj["D", "E"] = 1L
adj["A", "E"] = 1L
adj
amat(e) = adj
e
library(bnlearn)
source ("import_data.R")
crx <- read.data()
crx
# View(crx)
setwd("~/Projects/aml")
library(bnlearn)
source ("import_data.R")
crx <- read.data()
crx
# View(crx)
source ("import_data.R")
source ("import_data.R")
source ("lab1/import_data.R")
crx <- read.data()
crx <- load.data()
crx
source ("lab1/import_data.R")
crx <- load.data()
library(bnlearn)
source ("import_data.R")
ret <- load.data()
df <- ret$df
header <- ret$header
sapply(df,class)
#head(df)
View(df)
#bn <- empty.graph(header, num = 5)
bn <- hc(df, start = NULL, whitelist = NULL, blacklist = NULL,
score = NULL, debug = FALSE, restart = 3, perturb = 1,
max.iter = Inf, maxp = Inf, optimized = TRUE)
library(bnlearn)
source ("import_data.R")
ret <- load.data()
df <- ret$df
header <- ret$header
sapply(df,class)
#head(df)
View(df)
#bn <- empty.graph(header, num = 5)
bn <- hc(df, start = NULL, whitelist = NULL, blacklist = NULL,
score = NULL, debug = FALSE, restart = 3, perturb = 1,
max.iter = Inf, maxp = Inf, optimized = TRUE)
setwd("~/Projects/aml/lab1")
setwd("~/Projects/aml/lab1")
library(bnlearn)
source ("import_data.R")
ret <- load.data()
df <- ret$df
header <- ret$header
sapply(df,class)
#head(df)
View(df)
#bn <- empty.graph(header, num = 5)
bn <- hc(df, start = NULL, whitelist = NULL, blacklist = NULL,
score = NULL, debug = FALSE, restart = 3, perturb = 1,
max.iter = Inf, maxp = Inf, optimized = TRUE)
library(bnlearn)
source ("import_data.R")
ret <- load.data()
df <- ret$df
header <- ret$header
sapply(df,class)
#head(df)
View(df)
#bn <- empty.graph(header, num = 5)
bn <- hc(df, start = NULL, whitelist = NULL, blacklist = NULL,
score = NULL, debug = FALSE, restart = 3, perturb = 1,
max.iter = Inf, maxp = Inf, optimized = TRUE)
graphviz.plot(bn)
source("http://bioconductor.org/biocLite.R")
biocLite("Rgraphviz")
graphviz.plot(bn)
plot(bn)
??graphviz.plot
graphviz.plot(bn)
plot(bn)
graphviz.plot(bn)
library(bnlearn)
source ("import_data.R")
ret <- load.data()
df <- ret$df
header <- ret$header
sapply(df,class)
#head(df)
View(df)
#bn <- empty.graph(header, num = 5)
bn <- hc(df, start = NULL, whitelist = NULL, blacklist = NULL,
score = NULL, debug = FALSE, restart = 3, perturb = 3,
max.iter = Inf, maxp = Inf, optimized = TRUE)
graphviz.plot(bn)
??graphviz.plot
df2 <- ret$df
library(bnlearn)
source ("import_data.R")
ret <- load.data()
df <- ret$df
df2 <- ret$df
header <- ret$header
sapply(df,class)
#head(df)
View(df)
#bn <- empty.graph(header, num = 5)
bn <- hc(df, start = NULL, whitelist = NULL, blacklist = NULL,
score = NULL, debug = FALSE, restart = 3, perturb = 3,
max.iter = Inf, maxp = Inf, optimized = TRUE)
bn2 <- hc(df2, start = NULL, whitelist = NULL, blacklist = NULL,
score = NULL, debug = FALSE, restart = 3, perturb = 3,
max.iter = Inf, maxp = Inf, optimized = TRUE)
graphviz.plot(bn)
graphviz.plot(bn2)
all.equal(bn,bn2)
