abline(v = opt_sample_size, untf = FALSE)
plot(im_sa_si,score, type="l", xlab="Imaginary sample size", ylab="Score")
abline(v = opt_sample_size, untf = FALSE, col=green)
plot(im_sa_si,score, type="l", xlab="Imaginary sample size", ylab="Score")
abline(v = opt_sample_size, untf = FALSE, col="green")
plot(im_sa_si,no_of_arcs, xlab="Imaginary sample size", ylab="Number of arcs")
abline(v = opt_sample_size, untf = FALSE, col="green")
############# TASK ONE #############
library(bnlearn)
source ("import_data.R")
ret <- load.data()
df <- ret$df
header <- ret$header
sapply(df,class)
#View(df)
bn1 <- hc(df, start = NULL, whitelist = NULL, blacklist = NULL,
score = NULL, debug = FALSE, restart = 0, perturb = 1,
max.iter = Inf, maxp = Inf, optimized = TRUE)
bn2 <- hc(df, start = NULL, whitelist = NULL, blacklist = NULL,
score = NULL, debug = FALSE, restart = 0, perturb = 1,
max.iter = Inf, maxp = Inf, optimized = TRUE)
graphviz.plot(bn1)
all.equal(bn1,bn2) # Should be false
############# TASK TWO #############
score(bn1, df, type = "bde", iss = 1)
score(bn1, df, type = "bde", iss = 3)
score(bn1, df, type = "bde", iss = 5)
im_sa_si <- c(1:2000)
#bnBD <- hc(df, start = NULL, score = "bde", iss=2000,
#           restart = 3, max.iter = Inf,
#           maxp = Inf, optimized = TRUE)
no_of_arcs <- integer(length=0)
score <- integer(length=0)
for (i in im_sa_si){
bnBD <- hc(df, start = NULL, score = "bde", iss=i,
restart = 3, perturb = 3, max.iter = Inf,
maxp = Inf, optimized = TRUE)
no_of_arcs <- c(no_of_arcs, nrow(bnBD$arcs))
score <- c(score, score(bnBD,df, type = "bde", iss=i))
}
opt_sample_size <- alpha.star(bn1, df)
plot(im_sa_si,no_of_arcs, xlab="Imaginary sample size", ylab="Number of arcs")
abline(v = opt_sample_size, untf = FALSE, col="green")
plot(im_sa_si,score, type="l", xlab="Imaginary sample size", ylab="Score")
abline(v = opt_sample_size, untf = FALSE, col="green")
opt_sample_size <- alpha.star(bnBD, df)
opt_sample_size
bnBD <- hc(df, start = NULL, score = "bde", iss=10,
restart = 3, perturb = 3, max.iter = Inf,
maxp = Inf, optimized = TRUE)
opt_sample_size <- alpha.star(bnBD, df)
bnBD <- hc(df, start = NULL, score = "bde", iss=10000,
restart = 3, perturb = 3, max.iter = Inf,
maxp = Inf, optimized = TRUE)
opt_sample_size <- alpha.star(bnBD, df)
bnBD <- hc(df, start = NULL, score = "bde", iss=10,
restart = 3, perturb = 3, max.iter = Inf,
maxp = Inf, optimized = TRUE)
opt_sample_size <- alpha.star(bnBD, df)
bnBD <- hc(df, start = NULL, score = "bde", iss=10000,
restart = 3, perturb = 3, max.iter = Inf,
maxp = Inf, optimized = TRUE)
opt_sample_size <- alpha.star(bnBD, df)
??alpha.star
plot(im_sa_si,score, type="l", xlab="Imaginary sample size", ylab="Score")
abline(v = opt_sample_size, untf = FALSE, col="green")
############# TASK ONE #############
library(bnlearn)
source ("import_data.R")
ret <- load.data()
df <- ret$df
header <- ret$header
sapply(df,class)
#View(df)
bn1 <- hc(df, start = NULL, whitelist = NULL, blacklist = NULL,
score = NULL, debug = FALSE, restart = 0, perturb = 1,
max.iter = Inf, maxp = Inf, optimized = TRUE)
bn2 <- hc(df, start = NULL, whitelist = NULL, blacklist = NULL,
score = NULL, debug = FALSE, restart = 0, perturb = 1,
max.iter = Inf, maxp = Inf, optimized = TRUE)
graphviz.plot(bn1)
all.equal(bn1,bn2) # Should be false
############# TASK TWO #############
im_sa_si <- c(1:2000)
no_of_arcs <- integer(length=0)
score <- integer(length=0)
opt_sample_size <- numeric(length=0)
for (i in im_sa_si){
bnBD <- hc(df, start = NULL, score = "bde", iss=i,
restart = 3, perturb = 3, max.iter = Inf,
maxp = Inf, optimized = TRUE)
no_of_arcs <- c(no_of_arcs, nrow(bnBD$arcs))
score <- c(score, score(bnBD,df, type = "bde", iss=i))
if (i==1 | i = 2000){
opt_sample_size <- c(opt_sample_size, alpha.star(bnBD, df))
}
}
plot(im_sa_si,no_of_arcs, xlab="Imaginary sample size", ylab="Number of arcs")
abline(v = opt_sample_size, untf = FALSE, col="green")
plot(im_sa_si,score, type="l", xlab="Imaginary sample size", ylab="Score")
abline(v = opt_sample_size, untf = FALSE, col="green")
############# TASK ONE #############
library(bnlearn)
source ("import_data.R")
ret <- load.data()
df <- ret$df
header <- ret$header
sapply(df,class)
#View(df)
bn1 <- hc(df, start = NULL, whitelist = NULL, blacklist = NULL,
score = NULL, debug = FALSE, restart = 0, perturb = 1,
max.iter = Inf, maxp = Inf, optimized = TRUE)
bn2 <- hc(df, start = NULL, whitelist = NULL, blacklist = NULL,
score = NULL, debug = FALSE, restart = 0, perturb = 1,
max.iter = Inf, maxp = Inf, optimized = TRUE)
graphviz.plot(bn1)
all.equal(bn1,bn2) # Should be false
############# TASK TWO #############
im_sa_si <- c(1:2000)
no_of_arcs <- integer(length=0)
score <- integer(length=0)
opt_sample_size <- numeric(length=0)
for (i in im_sa_si){
bnBD <- hc(df, start = NULL, score = "bde", iss=i,
restart = 3, perturb = 3, max.iter = Inf,
maxp = Inf, optimized = TRUE)
no_of_arcs <- c(no_of_arcs, nrow(bnBD$arcs))
score <- c(score, score(bnBD,df, type = "bde", iss=i))
if (i==1 | i ==2000){
opt_sample_size <- c(opt_sample_size, alpha.star(bnBD, df))
}
}
plot(im_sa_si,no_of_arcs, xlab="Imaginary sample size", ylab="Number of arcs")
abline(v = opt_sample_size, untf = FALSE, col="green")
plot(im_sa_si,score, type="l", xlab="Imaginary sample size", ylab="Score")
abline(v = opt_sample_size, untf = FALSE, col="green")
biocLite(”RBGL”)
source("http://bioconductor.org/biocLite.R")
biocLite(”RBGL”)
source("http://bioconductor.org/biocLite.R")
biocLite("RBGL)
""
q())
"
??grain
??as.grain
############# TASK ONE #############
library(bnlearn)
source ("import_data.R")
ret <- load.data()
df <- ret$df
header <- ret$header
sapply(df,class)
#View(df)
bn1 <- hc(df, start = NULL, whitelist = NULL, blacklist = NULL,
score = NULL, debug = FALSE, restart = 0, perturb = 1,
max.iter = Inf, maxp = Inf, optimized = TRUE)
bn2 <- hc(df, start = NULL, whitelist = NULL, blacklist = NULL,
score = NULL, debug = FALSE, restart = 0, perturb = 1,
max.iter = Inf, maxp = Inf, optimized = TRUE)
graphviz.plot(bn1)
all.equal(bn1,bn2) # Should be false
############# TASK TWO #############
im_sa_si <- c(1:2000)
no_of_arcs <- integer(length=0)
score <- integer(length=0)
opt_sample_size <- numeric(length=0)
for (i in im_sa_si){
bnBD <- hc(df, start = NULL, score = "bde", iss=i,
restart = 3, perturb = 3, max.iter = Inf,
maxp = Inf, optimized = TRUE)
no_of_arcs <- c(no_of_arcs, nrow(bnBD$arcs))
score <- c(score, score(bnBD,df, type = "bde", iss=i))
if (i==1 | i ==2000){
opt_sample_size <- c(opt_sample_size, alpha.star(bnBD, df))
}
}
plot(im_sa_si,no_of_arcs, xlab="Imaginary sample size", ylab="Number of arcs")
abline(v = opt_sample_size, untf = FALSE, col="green")
plot(im_sa_si,score, type="l", xlab="Imaginary sample size", ylab="Score")
abline(v = opt_sample_size, untf = FALSE, col="green")
############# TASK THREE #############
graphviz.plot(bnBD)
plot(im_sa_si,score, type="l", xlab="Imaginary sample size", ylab="Score")
abline(v = opt_sample_size, untf = FALSE, col="green")
plot(im_sa_si,no_of_arcs, xlab="Imaginary sample size", ylab="Number of arcs")
abline(v = opt_sample_size, untf = FALSE, col="green")
finalBN <- hc(df, start = NULL, score = "bde", iss=150,
restart = 3, perturb = 3, max.iter = Inf,
maxp = Inf, optimized = TRUE)
nrow(finalBN$arcs)
graphviz.plot(finalBN)
finalBN <- hc(df, start = NULL, score = "bde", iss=150,
restart = 3, perturb = 3, max.iter = Inf,
maxp = Inf, optimized = TRUE)
nrow(finalBN$arcs) #8 arcs should be fine
graphviz.plot(finalBN)
finalBN <- hc(df, start = NULL, score = "bde", iss=150,
restart = 3, perturb = 3, max.iter = Inf,
maxp = Inf, optimized = TRUE)
nrow(finalBN$arcs) #8 arcs should be fine
graphviz.plot(finalBN)
finalBN <- hc(df, start = NULL, score = "bde", iss=150,
restart = 3, perturb = 3, max.iter = Inf,
maxp = Inf, optimized = TRUE)
nrow(finalBN$arcs) #8 arcs should be fine
graphviz.plot(finalBN)
finalBN <- hc(df, start = NULL, score = "bde", iss=150,
restart = 3, perturb = 3, max.iter = Inf,
maxp = Inf, optimized = TRUE)
nrow(finalBN$arcs) #8 arcs should be fine
graphviz.plot(finalBN)
?? bn.fit
copy <- finalBN
exact.fit.result <- bn.fit(finalBN, df)
?bn.fit
efr <- as.grain(exact.fit.result)
source("http://bioconductor.org/biocLite.R")
biocLite("RBGL")
efr <- as.grain(exact.fit.result)
?as.grain
efr <- as.grain(finalBN)
efr <- as.grain(exact.fit.result)
install.packages("gRain")
efr <- as.grain(exact.fit.result)
exact.fit.result <- bn.fit(finalBN, df) #done with MLE
efr <- as.grain(exact.fit.result)
?bn.fit
df
view(df)
View(df)
efr <- as.grain(exact.fit.result)
?df
?`data.frame-class`
############# TASK ONE #############
library(bnlearn)
source ("import_data.R")
ret <- load.data()
df <- ret$df
header <- ret$header
sapply(df,class)
#View(df)
bn1 <- hc(df, start = NULL, whitelist = NULL, blacklist = NULL,
score = NULL, debug = FALSE, restart = 0, perturb = 1,
max.iter = Inf, maxp = Inf, optimized = TRUE)
bn2 <- hc(df, start = NULL, whitelist = NULL, blacklist = NULL,
score = NULL, debug = FALSE, restart = 0, perturb = 1,
max.iter = Inf, maxp = Inf, optimized = TRUE)
graphviz.plot(bn1)
all.equal(bn1,bn2) # Should be false
############# TASK TWO #############
im_sa_si <- c(1:2000)
no_of_arcs <- integer(length=0)
score <- integer(length=0)
opt_sample_size <- numeric(length=0)
for (i in im_sa_si){
bnBD <- hc(df, start = NULL, score = "bde", iss=i,
restart = 3, perturb = 3, max.iter = Inf,
maxp = Inf, optimized = TRUE)
no_of_arcs <- c(no_of_arcs, nrow(bnBD$arcs))
score <- c(score, score(bnBD,df, type = "bde", iss=i))
if (i==1 | i ==2000){
opt_sample_size <- c(opt_sample_size, alpha.star(bnBD, df))
}
}
############# TASK ONE #############
library(bnlearn)
source ("import_data.R")
ret <- load.data()
df <- ret$df
header <- ret$header
sapply(df,class)
#View(df)
bn1 <- hc(df, start = NULL, whitelist = NULL, blacklist = NULL,
score = NULL, debug = FALSE, restart = 0, perturb = 1,
max.iter = Inf, maxp = Inf, optimized = TRUE)
bn2 <- hc(df, start = NULL, whitelist = NULL, blacklist = NULL,
score = NULL, debug = FALSE, restart = 0, perturb = 1,
max.iter = Inf, maxp = Inf, optimized = TRUE)
graphviz.plot(bn1)
all.equal(bn1,bn2) # Should be false
############# TASK TWO #############
im_sa_si <- c(1:2000)
no_of_arcs <- integer(length=0)
score <- integer(length=0)
opt_sample_size <- numeric(length=0)
for (i in im_sa_si){
bnBD <- hc(df, start = NULL, score = "bde", iss=i,
restart = 3, perturb = 3, max.iter = Inf,
maxp = Inf, optimized = TRUE)
no_of_arcs <- c(no_of_arcs, nrow(bnBD$arcs))
score <- c(score, score(bnBD,df, type = "bde", iss=i))
if (i==1 | i ==2000){
opt_sample_size <- c(opt_sample_size, alpha.star(bnBD, df))
}
}
graphviz.plot(bnBD)
plot(im_sa_si,no_of_arcs, xlab="Imaginary sample size", ylab="Number of arcs")
abline(v = opt_sample_size, untf = FALSE, col="green")
plot(im_sa_si,score, type="l", xlab="Imaginary sample size", ylab="Score")
abline(v = opt_sample_size, untf = FALSE, col="green")
############# TASK THREE #############
finalBN <- hc(df, start = NULL, score = "bde", iss=150,
restart = 3, perturb = 3, max.iter = Inf,
maxp = Inf, optimized = TRUE)
nrow(finalBN$arcs) #8 arcs should be fine
graphviz.plot(finalBN)
copy <- finalBN
### Exact ###
exact.fit.result <- bn.fit(finalBN, df) #done with MLE
efr <- as.grain(exact.fit.result)
############# TASK ONE #############
library(bnlearn)
source ("import_data.R")
ret <- load.data()
df <- ret$df
header <- ret$header
sapply(df,class)
#View(df)
bn1 <- hc(df, start = NULL, whitelist = NULL, blacklist = NULL,
score = NULL, debug = FALSE, restart = 0, perturb = 1,
max.iter = Inf, maxp = Inf, optimized = TRUE)
bn2 <- hc(df, start = NULL, whitelist = NULL, blacklist = NULL,
score = NULL, debug = FALSE, restart = 0, perturb = 1,
max.iter = Inf, maxp = Inf, optimized = TRUE)
graphviz.plot(bn1)
all.equal(bn1,bn2) # Should be false
############# TASK TWO #############
im_sa_si <- c(1:1)
no_of_arcs <- integer(length=0)
score <- integer(length=0)
opt_sample_size <- numeric(length=0)
for (i in im_sa_si){
bnBD <- hc(df, start = NULL, score = "bde", iss=i,
restart = 3, perturb = 3, max.iter = Inf,
maxp = Inf, optimized = TRUE)
no_of_arcs <- c(no_of_arcs, nrow(bnBD$arcs))
score <- c(score, score(bnBD,df, type = "bde", iss=i))
if (i==1 | i ==2000){
opt_sample_size <- c(opt_sample_size, alpha.star(bnBD, df))
}
}
graphviz.plot(bnBD)
plot(im_sa_si,no_of_arcs, xlab="Imaginary sample size", ylab="Number of arcs")
abline(v = opt_sample_size, untf = FALSE, col="green")
plot(im_sa_si,score, type="l", xlab="Imaginary sample size", ylab="Score")
abline(v = opt_sample_size, untf = FALSE, col="green")
############# TASK THREE #############
finalBN <- hc(df, start = NULL, score = "bde", iss=150,
restart = 3, perturb = 3, max.iter = Inf,
maxp = Inf, optimized = TRUE)
nrow(finalBN$arcs) #8 arcs should be fine
graphviz.plot(finalBN)
copy <- finalBN
### Exact ###
exact.fit.result <- bn.fit(finalBN, df) #done with MLE
efr <- as.grain(exact.fit.result)
############# TASK ONE #############
library(bnlearn)
source ("import_data.R")
ret <- load.data()
df <- ret$df
header <- ret$header
sapply(df,class)
#View(df)
bn1 <- hc(df, start = NULL, whitelist = NULL, blacklist = NULL,
score = NULL, debug = FALSE, restart = 0, perturb = 1,
max.iter = Inf, maxp = Inf, optimized = TRUE)
bn2 <- hc(df, start = NULL, whitelist = NULL, blacklist = NULL,
score = NULL, debug = FALSE, restart = 0, perturb = 1,
max.iter = Inf, maxp = Inf, optimized = TRUE)
graphviz.plot(bn1)
all.equal(bn1,bn2) # Should be false
############# TASK TWO #############
im_sa_si <- c(1:1)
no_of_arcs <- integer(length=0)
score <- integer(length=0)
opt_sample_size <- numeric(length=0)
for (i in im_sa_si){
bnBD <- hc(df, start = NULL, score = "bde", iss=i,
restart = 3, perturb = 3, max.iter = Inf,
maxp = Inf, optimized = TRUE)
no_of_arcs <- c(no_of_arcs, nrow(bnBD$arcs))
score <- c(score, score(bnBD,df, type = "bde", iss=i))
if (i==1 | i ==2000){
opt_sample_size <- c(opt_sample_size, alpha.star(bnBD, df))
}
}
graphviz.plot(bnBD)
plot(im_sa_si,no_of_arcs, xlab="Imaginary sample size", ylab="Number of arcs")
abline(v = opt_sample_size, untf = FALSE, col="green")
plot(im_sa_si,score, type="l", xlab="Imaginary sample size", ylab="Score")
abline(v = opt_sample_size, untf = FALSE, col="green")
############# TASK THREE #############
finalBN <- hc(df, start = NULL, score = "bde", iss=150,
restart = 3, perturb = 3, max.iter = Inf,
maxp = Inf, optimized = TRUE)
nrow(finalBN$arcs) #8 arcs should be fine
graphviz.plot(finalBN)
copy <- finalBN
### Exact ###
exact.fit.result <- bn.fit(finalBN, df) #done with MLE
efr <- as.grain(exact.fit.result)
############# TASK ONE #############
library(bnlearn)
source ("import_data.R")
ret <- load.data()
df <- ret$df
header <- ret$header
sapply(df,class)
#View(df)
bn1 <- hc(df, start = NULL, whitelist = NULL, blacklist = NULL,
score = NULL, debug = FALSE, restart = 0, perturb = 1,
max.iter = Inf, maxp = Inf, optimized = TRUE)
bn2 <- hc(df, start = NULL, whitelist = NULL, blacklist = NULL,
score = NULL, debug = FALSE, restart = 0, perturb = 1,
max.iter = Inf, maxp = Inf, optimized = TRUE)
graphviz.plot(bn1)
all.equal(bn1,bn2) # Should be false
############# TASK TWO #############
im_sa_si <- c(1:1)
no_of_arcs <- integer(length=0)
score <- integer(length=0)
opt_sample_size <- numeric(length=0)
for (i in im_sa_si){
bnBD <- hc(df, start = NULL, score = "bde", iss=i,
restart = 3, perturb = 3, max.iter = Inf,
maxp = Inf, optimized = TRUE)
no_of_arcs <- c(no_of_arcs, nrow(bnBD$arcs))
score <- c(score, score(bnBD,df, type = "bde", iss=i))
if (i==1 | i ==2000){
opt_sample_size <- c(opt_sample_size, alpha.star(bnBD, df))
}
}
graphviz.plot(bnBD)
plot(im_sa_si,no_of_arcs, xlab="Imaginary sample size", ylab="Number of arcs")
abline(v = opt_sample_size, untf = FALSE, col="green")
plot(im_sa_si,score, type="l", xlab="Imaginary sample size", ylab="Score")
abline(v = opt_sample_size, untf = FALSE, col="green")
############# TASK THREE #############
finalBN <- hc(df, start = NULL, score = "bde", iss=150,
restart = 3, perturb = 3, max.iter = Inf,
maxp = Inf, optimized = TRUE)
nrow(finalBN$arcs) #8 arcs should be fine
graphviz.plot(finalBN)
copy <- finalBN
### Exact ###
exact.fit.result <- bn.fit(finalBN, df) #done with MLE
efr <- as.grain(exact.fit.result)
finalBN <- hc(df, start = NULL, score = "bde", iss=120,
restart = 3, perturb = 3, max.iter = Inf,
maxp = Inf, optimized = TRUE)
nrow(finalBN$arcs) #8 arcs should be fine
graphviz.plot(finalBN)
finalBN <- hc(df, start = NULL, score = "bde", iss=120,
restart = 3, perturb = 3, max.iter = Inf,
maxp = Inf, optimized = TRUE)
nrow(finalBN$arcs) #8 arcs should be fine
graphviz.plot(finalBN)
finalBN <- hc(df, start = NULL, score = "bde", iss=120,
restart = 3, perturb = 3, max.iter = Inf,
maxp = Inf, optimized = TRUE)
nrow(finalBN$arcs) #8 arcs should be fine
graphviz.plot(finalBN)
finalBN <- hc(df, start = NULL, score = "bde", iss=120,
restart = 3, perturb = 3, max.iter = Inf,
maxp = Inf, optimized = TRUE)
nrow(finalBN$arcs) #8 arcs should be fine
graphviz.plot(finalBN)
finalBN <- hc(df, start = NULL, score = "bde", iss=120,
restart = 3, perturb = 3, max.iter = Inf,
maxp = Inf, optimized = TRUE)
nrow(finalBN$arcs) #8 arcs should be fine
graphviz.plot(finalBN)
finalBN <- hc(df, start = NULL, score = "bde", iss=100,
restart = 3, perturb = 3, max.iter = Inf,
maxp = Inf, optimized = TRUE)
nrow(finalBN$arcs) #8 arcs should be fine
graphviz.plot(finalBN)
finalBN <- hc(df, start = NULL, score = "bde", iss=80,
restart = 3, perturb = 3, max.iter = Inf,
maxp = Inf, optimized = TRUE)
nrow(finalBN$arcs) #8 arcs should be fine
graphviz.plot(finalBN)
copy <- finalBN
### Exact ###
exact.fit.result <- bn.fit(finalBN, df) #done with MLE
efr <- as.grain(exact.fit.result)
copy <- finalBN
### Exact ###
exact.fit.result <- bn.fit(finalBN, df) #done with MLE
efr <- as.grain(exact.fit.result)
?COMPILE
??COMPILE
compile(efr)
compile(efr)
grain-compile(efr)
gRain-compile(efr)
gRain::grain-compile(efr)
gRain::compile.grain(efr)
?setFindings
??setFindings
gRain::compile.grain(efr)
gRain::compile.grain(efr)
gRain::grain(efr)
gRain::compile.grain(efr)
compile(efr)
??compile
gRain::compile.grain(efr)
sapply(efr,class)
efr <- as.grain(exact.fit.result)
??querygrain
